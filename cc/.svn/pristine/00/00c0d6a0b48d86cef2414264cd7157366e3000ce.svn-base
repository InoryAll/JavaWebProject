package com.dao;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.entity.Course;
import com.entity.Pager;
import com.util.DBUtil;
import com.util.StringUtil;

public class CourseDao {
	
	public boolean insert(Course course){
		DBUtil dbUtil = new DBUtil();
		dbUtil.getConnection();
		List<Object> param = new ArrayList<Object>();
		
		param.add(course.getName());
		param.add(course.getTeacher().getId());
		param.add(course.getDate());
		param.add(course.getInfo());
		param.add(course.getDflag());
		
		
		String sql = "insert into course (name,tid,date,info,dflag) values(?,?,?,?,?)";
		
		if(dbUtil.excutePUpdate(sql, param)){
			if(dbUtil!=null)
			{	
				dbUtil.closeAll();
				dbUtil=null;
			}
			return true;
		}
		if(dbUtil!=null)
		{	
			dbUtil.closeAll();
			dbUtil=null;
		}
		return false;
	}
	
	public boolean delete(Course Course){
		DBUtil dbUtil = new DBUtil();
		dbUtil.getConnection();
		List<Object> param = new ArrayList<Object>();
		
		param.add(Course.getId());
		
		String sql = "update course set dflag=1 where id=?;";
		if(dbUtil.excutePUpdate(sql, param)){
			if(dbUtil!=null)
			{	
				dbUtil.closeAll();
				dbUtil=null;
			}
			return true;
		}
		if(dbUtil!=null)
		{	
			dbUtil.closeAll();
			dbUtil=null;
		}
		return false;
	}
	
	public boolean setcourseStatus(int id ,int courseStatus){
		DBUtil dbUtil = new DBUtil();
		dbUtil.getConnection();
		List<Object> param = new ArrayList<Object>();
		
		param.add(courseStatus);
		param.add(id);
		
		String sql = "update course set coursestatus=? where id=?";
		if(dbUtil.excutePUpdate(sql, param)){
			if(dbUtil!=null)
			{	
				dbUtil.closeAll();
				dbUtil=null;
			}
			return true;
		}
		if(dbUtil!=null)
		{	
			dbUtil.closeAll();
			dbUtil=null;
		}
		return false;
	}
	
	public boolean update(Course courseModel){
		DBUtil dbUtil = new DBUtil();
		dbUtil.getConnection();
		List<Object> param = new ArrayList<Object>();
		
		
		StringBuffer sql = new StringBuffer("update course set dflag=0");
		if(!StringUtil.isNullString(courseModel.getName())){
			sql.append(",name = ?");
			param.add(courseModel.getName());
		}
		if(!StringUtil.isNullString(courseModel.getTeacher().getId())){
			sql.append(",tid = ?");
			param.add(courseModel.getTeacher().getId());
		}
		if(!StringUtil.isNullString(courseModel.getDate())){
			sql.append(",date = ?");
			param.add(courseModel.getDate());
		}
		if(!StringUtil.isNullString(courseModel.getInfo())){
			sql.append(",info = ?");
			param.add(courseModel.getInfo());
		}
		if(courseModel.getCourseStatus()>0){
			sql.append(",coursestatus = ?");
			param.add(courseModel.getCourseStatus());
		}
		
		sql.append(" where id = ?");
		param.add(courseModel.getId());
		
		if(dbUtil.excutePUpdate(sql.toString(), param)){
			if(dbUtil!=null)
			{	
				dbUtil.closeAll();
				dbUtil=null;
			}
			return true;
		}
		if(dbUtil!=null)
		{	
			dbUtil.closeAll();
			dbUtil=null;
		}
		return false;
	}
	
	
	public Course findCourseById(String id){
		DBUtil dbUtil = new DBUtil();
		dbUtil.getConnection();
		List<Object> param = new ArrayList<Object>();
		Course Course = null;
		
		param.add(id);
		
		String sql = "select * from course where dflag=0 and id = ?";
		List<Map<String,Object>> result = dbUtil.findResult(sql, param);
		if(result!=null && result.size()>0){
			Map<String,Object> map = result.get(0);
			Course = new Course(map);
		}
		if(dbUtil!=null)
		{	
			dbUtil.closeAll();
			dbUtil=null;
		}
		return Course;
	}
	public Course findCourseById(int id){
		DBUtil dbUtil = new DBUtil();
		dbUtil.getConnection();
		List<Object> param = new ArrayList<Object>();
		Course Course = null;
		
		param.add(id);
		
		String sql = "select * from course where dflag=0 and id = ?";
		List<Map<String,Object>> result = dbUtil.findResult(sql, param);
		if(result!=null && result.size()>0){
			Map<String,Object> map = result.get(0);
			Course = new Course(map);
		}
		if(dbUtil!=null)
		{	
			dbUtil.closeAll();
			dbUtil=null;
		}
		return Course;
	}
	
	public List<String> findAllName() {
		DBUtil dbUtil = new DBUtil();
		dbUtil.getConnection();
		List<Object> param = new ArrayList<Object>();
		
		List<String> namelist =new ArrayList<String>();
		
		String sql = "select name from course where dflag=0 ";
		List<Map<String,Object>> result = dbUtil.findResult(sql, param);
		if(result!=null && result.size()>0){
			for(Map<String,Object> map : result){
				namelist.add((String)map.get("name"));
			}
		}
		if(dbUtil!=null)
		{	
			dbUtil.closeAll();
			dbUtil=null;
		}
		return namelist;
	}

	public  Pager<Course> findCourseForPager(Course courseModel, int pageNum,int pageSize) {
		// TODO Auto-generated method stub
		List<Object> param=new ArrayList<Object>();
		DBUtil  dbUtil=new DBUtil();
		dbUtil.getConnection();
		List<Course> dataList=new ArrayList<Course>(); 
		StringBuffer sql=new StringBuffer("select * from course where dflag=0 ");
		StringBuffer sqltotalRecord=new StringBuffer("select count(id) as totalrecord from course where dflag=0");
		if(courseModel.getId()>0){
			sql.append(" and id=?");
			sqltotalRecord.append(" and id=?");
			param.add(courseModel.getId());
		}
		if(!StringUtil.isNullString(courseModel.getName())){
			sql.append("and name like ?");
			sqltotalRecord.append(" and name like ?");
			param.add("%"+courseModel.getName().trim()+"%");
		}
		if(courseModel.getTeacher() != null && !StringUtil.isNullString(courseModel.getTeacher().getId())){
			sql.append("and tid = ?");
			sqltotalRecord.append(" and tid = ?");
			param.add(courseModel.getTeacher().getId());
		}
		if(!StringUtil.isNullString(courseModel.getDate())){
			sql.append("and date like ?");
			sqltotalRecord.append(" and date like ?");
			param.add("%"+courseModel.getDate().trim()+"%");
		}
		if(!StringUtil.isNullString(courseModel.getInfo())){
			sql.append("and info like ?");
			sqltotalRecord.append(" and info like ?");
			param.add("%"+courseModel.getInfo().trim()+"%");
		}
		if(courseModel.getCourseStatus()>0){
			sql.append(",coursestatus = ?");
			sqltotalRecord.append(" and coursestatus=?");
			param.add(courseModel.getCourseStatus());
		}
		
		// 起始索引
		int fromIndex	= pageSize * (pageNum -1);
				
		// 使用limit关键字，实现分页
		sql.append(" limit " + fromIndex + ", " + pageSize );
		//获取总记录数
		List<Map<String,Object>> countResult=dbUtil.findResult(sqltotalRecord.toString(), param);
		Map<String,Object> countmap=countResult.get(0);
		int totalRecord=Integer.parseInt(String.valueOf(countmap.get("totalrecord")));
		
		//获取所有记录
		List<Map<String,Object>> resultlist=dbUtil.findResult(sql.toString(), param);
		for(Map<String,Object> map:resultlist){
			Course u=new Course(map);
			dataList.add(u);
		}
		
		//获取总页数
		int totalPage=totalRecord/pageSize;
		if(totalRecord%pageSize!=0){
			totalPage++;
		}
		
		//封装Pager
		Pager<Course> result=new Pager<Course>(pageSize, pageNum, totalRecord, totalPage, dataList);
		
		
		if(dbUtil!=null)
		{	
			dbUtil.closeAll();
			dbUtil=null;
		}
		return result;
	}
	
	public Pager<Course> findCourseGiveUpRepeatForPager(List<Integer> cid,
			Course courseModel, int pageNum, int pageSize) {
		// TODO Auto-generated method stub
		List<Object> param=new ArrayList<Object>();
		DBUtil  dbUtil=new DBUtil();
		dbUtil.getConnection();
		List<Course> dataList=new ArrayList<Course>(); 
		StringBuffer sql=new StringBuffer("select * from course where dflag=0 ");
		StringBuffer sqltotalRecord=new StringBuffer("select count(id) as totalrecord from course where dflag=0");
		if(courseModel.getId()>0){
			sql.append(" and id=?");
			sqltotalRecord.append(" and id=?");
			param.add(courseModel.getId());
		}
		if(cid.size()>0||cid!=null){
			for(Integer id:cid){
				sql.append(" and id!=?");
				sqltotalRecord.append(" and id!=?");
				param.add(id);
			}
		}
		if(!StringUtil.isNullString(courseModel.getName())){
			sql.append("and name like ?");
			sqltotalRecord.append(" and name like ?");
			param.add("%"+courseModel.getName().trim()+"%");
		}
		if(courseModel.getTeacher() != null && !StringUtil.isNullString(courseModel.getTeacher().getId())){
			sql.append("and tid = ?");
			sqltotalRecord.append(" and tid = ?");
			param.add(courseModel.getTeacher().getId());
		}
		if(!StringUtil.isNullString(courseModel.getDate())){
			sql.append("and date like ?");
			sqltotalRecord.append(" and date like ?");
			param.add("%"+courseModel.getDate().trim()+"%");
		}
		if(!StringUtil.isNullString(courseModel.getInfo())){
			sql.append("and info like ?");
			sqltotalRecord.append(" and info like ?");
			param.add("%"+courseModel.getInfo().trim()+"%");
		}
		if(courseModel.getCourseStatus()>0){
			sql.append(",coursestatus = ?");
			sqltotalRecord.append(" and coursestatus=?");
			param.add(courseModel.getCourseStatus());
		}
		
		
		// 起始索引
		int fromIndex	= pageSize * (pageNum -1);
				
		// 使用limit关键字，实现分页
		sql.append(" limit " + fromIndex + ", " + pageSize );
		//获取总记录数
		List<Map<String,Object>> countResult=dbUtil.findResult(sqltotalRecord.toString(), param);
		Map<String,Object> countmap=countResult.get(0);
		int totalRecord=Integer.parseInt(String.valueOf(countmap.get("totalrecord")));
		
		//获取所有记录
		List<Map<String,Object>> resultlist=dbUtil.findResult(sql.toString(), param);
		for(Map<String,Object> map:resultlist){
			Course u=new Course(map);
			dataList.add(u);
		}
		
		//获取总页数
		int totalPage=totalRecord/pageSize;
		if(totalRecord%pageSize!=0){
			totalPage++;
		}
		
		//封装Pager
		Pager<Course> result=new Pager<Course>(pageSize, pageNum, totalRecord, totalPage, dataList);
		
		
		if(dbUtil!=null)
		{	
			dbUtil.closeAll();
			dbUtil=null;
		}
		return result;
	}


}
