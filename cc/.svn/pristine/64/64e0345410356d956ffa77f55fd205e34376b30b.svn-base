package com.servlet;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.entity.Course;
import com.entity.Pager;
import com.entity.Person;
import com.entity.SCReRelation;
import com.entity.Student;
import com.entity.Teacher;
import com.service.CourseService;
import com.service.SCReRelationService;
import com.service.StudentService;
import com.service.TeacherService;
import com.util.StringUtil;

@WebServlet("/TeacherServlet")
public class TeacherServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private TeacherService teacherService = new TeacherService();
	private CourseService courseService = new CourseService();
	private SCReRelationService screRelationService = new SCReRelationService();
	private StudentService studentService = new StudentService();
	private HttpSession session;
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		this.doPost(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 初始化操作类
				session = request.getSession();
				Enumeration<String> element = null;
				// 操作列表
				/*
				 * modify--修改信息 
				 * add--添加课程
				 * delete--删除课程
				 * manage--学生管理 
				 * record--登记成绩
				 */
				String action = "";
				String src = "";
				action = request.getParameter("action");
				boolean first = true;
				switch (action) {
				case "add":
					src = "teacher.jsp";
					boolean ReturnMessage = false;
					first = StringUtil.isNullString(request
							.getParameter("first")) ? true : false;
					Pager <Teacher> tempTeachers = new Pager<Teacher>();
					Pager <Course> CourseResult = new Pager<Course>();
					int pageNum = 1;
					int pageSize = 60;
					Course CourseModel = new Course();
					Teacher TeacherModel = new Teacher();
					TeacherModel.setId(((Person) session.getAttribute("loginUser")).getId());
					tempTeachers = teacherService.findTeacherForPager(TeacherModel, pageNum, pageSize);
					CourseModel.setTeacher(tempTeachers.getDataList().get(0));
					CourseResult = courseService.findCourseForPager(CourseModel, pageNum, pageSize);
					request.setAttribute("CourseResult", CourseResult);
					if(!first){
						Object object = null;
						Class<?> cls = null;
						try{
							cls = Course.class;
							object = cls.newInstance();
							Person loginUser = (Person) session.getAttribute("loginUser");
							((Course)object).setTeacher(teacherService.findTeacherById(loginUser.getId()));
						} catch (Exception e) {
							e.printStackTrace();
						}element = request.getParameterNames();
						while (element.hasMoreElements()) {
							String eName = element.nextElement();
							String eValue = request.getParameter(eName);
							if(!eName.substring(0, 1).equals("c")) continue;
							else 
								eName = eName.substring(1);
							String function = "set"
									+ Character.toUpperCase(eName.toCharArray()[0])
									+ eName.substring(1);
							Method method;
							try {
								if(eName.equals("id")) {
									method = cls.getMethod(function, int.class);
									Object[] parameter = { Integer.parseInt(eValue)};
									method.invoke(object, parameter);
								}
								else {
									method = cls.getMethod(function, String.class);
									Object[] parameter = { eValue };
									method.invoke(object, parameter);
								}
								
								
							} catch (IllegalAccessException e) {
								e.printStackTrace();
							} catch (IllegalArgumentException e) {
								e.printStackTrace();
							} catch (InvocationTargetException e) {
								e.printStackTrace();
							} catch (NoSuchMethodException e) {
								continue;
							} catch (SecurityException e) {
								e.printStackTrace();
							}
						}ReturnMessage = courseService.addCourse((Course)object);
						request.setAttribute("ReturnMessage", ReturnMessage);
					}
					break;
				case "modify":
					src = "teacher.jsp";// 跳转到修改页面
					Object person = null;
					ReturnMessage = false;
					first = StringUtil.isNullString(request
							.getParameter("first")) ? true : false;
					Class<?> cls = null;
					if (first) {
						try {
								cls = Teacher.class;
								person = cls.newInstance();
								person = teacherService
										.findTeacherById(((Person) session
												.getAttribute("loginUser")).getId());
								request.setAttribute("teacher", (Teacher) person);
							session.setAttribute("cls", cls);
							session.setAttribute("person",person);
						} catch (InstantiationException e) {
							e.printStackTrace();
						} catch (IllegalAccessException e) {
							e.printStackTrace();
						}
					} else {// 如果不是第一次进入
						cls = (Class<?>) session.getAttribute("cls");
						person = session.getAttribute("person");
						src = "teacher.jsp";// 跳转到提交修改成功的地方
						element = request.getParameterNames();
						while (element.hasMoreElements()) {
							String eName = element.nextElement();
							String eValue = request.getParameter(eName);
							String function = "set"
									+ Character.toUpperCase(eName.toCharArray()[0])
									+ eName.substring(1);
							Method method;
							try {
								method = cls.getMethod(function, String.class);
								Object[] parameter = { eValue };
								method.invoke(person, parameter);
								
							} catch (IllegalAccessException e) {
								e.printStackTrace();
							} catch (IllegalArgumentException e) {
								e.printStackTrace();
							} catch (InvocationTargetException e) {
								e.printStackTrace();
							} catch (NoSuchMethodException e) {
								continue;
							} catch (SecurityException e) {
								e.printStackTrace();
							}
						}
							ReturnMessage = teacherService
							.updateTeacher((Teacher) person);
							request.setAttribute("teacher", (Teacher) person);
					}
					request.setAttribute("ReturnMessage", ReturnMessage ? 1 : 0);
					break;
				case "delete":
					src = "teacher.jsp";
					ReturnMessage = false;
					first = StringUtil.isNullString(request
							.getParameter("first")) ? true : false;
					tempTeachers = new Pager<Teacher>();
					CourseResult = new Pager<Course>();
					pageNum = 1;
					pageSize = 60;
					CourseModel = new Course();
					TeacherModel = new Teacher();
					TeacherModel.setId(((Person) session.getAttribute("loginUser")).getId());
					tempTeachers = teacherService.findTeacherForPager(TeacherModel, pageNum, pageSize);
					CourseModel.setTeacher(tempTeachers.getDataList().get(0));
					CourseResult = courseService.findCourseForPager(CourseModel, pageNum, pageSize);
					request.setAttribute("CourseResult", CourseResult);
					if(!first){
						String deleteItem = request.getParameter("delete_item");
						String[] tempdelete = deleteItem.split(" ");
						String cid = tempdelete[0];
						courseService.deleteCourse(Integer.parseInt(cid));
					}
					break;
				case "manage":
					src = "teacher.jsp";
					first = StringUtil.isNullString(request
							.getParameter("first")) ? true : false;
						pageNum = 1;
						pageSize = 20;
						Person loginUser = (Person) session.getAttribute("loginUser");
						CourseModel = new Course();
						Teacher t = teacherService.findTeacherById(loginUser.getId());
						CourseModel.setTeacher(t);
						CourseResult = courseService.findCourseForPager(CourseModel, pageNum, pageSize);
						List<String> CourseName = new ArrayList<String>();
						for(Course x :CourseResult.getDataList()) CourseName.add(x.getName());
						request.setAttribute("CourseName", CourseName);
					if(!first){
						Pager<SCReRelation> tempscrerelation = new Pager<SCReRelation>();
						pageNum = 1;
						pageSize = 1;
						loginUser = (Person) session.getAttribute("loginUser");
						String tid = loginUser.getId();
						String cname = request.getParameter("manage_cname");
						CourseModel = new Course();
						CourseModel.setName(cname);
						t = teacherService.findTeacherById(tid);
						CourseModel.setTeacher(t);
						CourseResult = courseService.findCourseForPager(CourseModel, pageNum, pageSize);
						String CourseId = String.valueOf(CourseResult.getDataList().get(0).getId());
						pageSize = 60;
						SCReRelation sCReRelationModel = new SCReRelation();
						sCReRelationModel.setCid(CourseResult.getDataList().get(0).getId());
						tempscrerelation = screRelationService.findSCReRelationForPager(sCReRelationModel, pageNum, pageSize);
						Pager<Student> studentResult = new Pager<Student>();
						studentResult.setTotalRecord(tempscrerelation.getTotalRecord());
						studentResult.setPageSize(tempscrerelation.getPageSize());
						studentResult.setCurrentPage(tempscrerelation.getCurrentPage());
						studentResult.setTotalPage(tempscrerelation.getTotalPage());
						for(SCReRelation x : tempscrerelation.getDataList()) studentResult.getDataList().add(studentService.findStudentById(x.getSid()));
						request.setAttribute("StudentResult", studentResult);
						request.setAttribute("CourseId",CourseId);
					}
					break;
				case "record":
					src = "teacher.jsp";
					first = StringUtil.isNullString(request
							.getParameter("first")) ? true : false;
						pageNum = 1;
						pageSize = 20;
						loginUser = (Person) session.getAttribute("loginUser");
						CourseModel = new Course();
						t = teacherService.findTeacherById(loginUser.getId());
						CourseModel.setTeacher(t);
						CourseResult = courseService.findCourseForPager(CourseModel, pageNum, pageSize);
						CourseName = new ArrayList<String>();
						for(Course x :CourseResult.getDataList()) CourseName.add(x.getName());
						request.setAttribute("CourseName", CourseName);
					if(!first){
						Pager<SCReRelation> tempscrerelation = new Pager<SCReRelation>();
						pageNum = 1;
						pageSize = 1;
						loginUser = (Person) session.getAttribute("loginUser");
						String tid = loginUser.getId();
						String cname = request.getParameter("manage_cname");
						CourseModel = new Course();
						CourseModel.setName(cname);
						t = teacherService.findTeacherById(tid);
						CourseModel.setTeacher(t);
						CourseResult = courseService.findCourseForPager(CourseModel, pageNum, pageSize);
						String CourseId = String.valueOf(CourseResult.getDataList().get(0).getId());
						pageSize = 60;
						SCReRelation sCReRelationModel = new SCReRelation();
						sCReRelationModel.setCid(CourseResult.getDataList().get(0).getId());
						tempscrerelation = screRelationService.findSCReRelationForPager(sCReRelationModel, pageNum, pageSize);
						Pager<Student> studentResult = new Pager<Student>();
						studentResult.setTotalRecord(tempscrerelation.getTotalRecord());
						studentResult.setPageSize(tempscrerelation.getPageSize());
						studentResult.setCurrentPage(tempscrerelation.getCurrentPage());
						studentResult.setTotalPage(tempscrerelation.getTotalPage());
						for(SCReRelation x : tempscrerelation.getDataList()) studentResult.getDataList().add(studentService.findStudentById(x.getSid()));
						request.setAttribute("StudentResult", studentResult);
						request.setAttribute("CourseId",CourseId);
					}
					break;
				}
				String x = action;
				action = "Teacher";
				action += x;
				request.setAttribute("action", action);
				request.getRequestDispatcher(src).forward(request, response);
	}

}
